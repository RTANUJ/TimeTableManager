/*
     * This is the complete Source Code of the Project Time Table Manager...
     * Please read the Instructions File attached first of all...
         
*/
package TTM;
/*Import Section to import all necessary libraries*/
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.time.format.TextStyle;
import java.util.Locale;
import java.time.DayOfWeek;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.io.*;


public class MAIN extends javax.swing.JFrame {

/*Global Variables initialisation*/    
    String MySQLPass ="";
    String DBName ="TTM";
    String SELCLASS = null;
    int EnglishPeriod = 0;
    int PhysicsPeriod = 0;
    int ChemistryPeriod = 0;
    int BiologyPeriod = 0;
    int MathPeriod = 0;
    int IPPeriod = 0;
    int GamesPeriod=0;
    
    
  
    public MAIN() {
        initComponents();
    this.setVisible(true);    
    }
    @SuppressWarnings("unchecked")
    
/*Code auto-generated by NetBeans Begin*/
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AboutMe = new javax.swing.JDialog();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        AbtMeCloseBtn = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        ReadMe = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        DaySubWiseTT = new javax.swing.JFrame();
        jLabel3 = new javax.swing.JLabel();
        CBDYDWSB = new javax.swing.JComboBox<>();
        CBSUBDWSB = new javax.swing.JComboBox<>();
        L1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        DWSBT = new javax.swing.JTable();
        DWSBBUTTON = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        CBCLASSDWSB = new javax.swing.JComboBox<>();
        PerTT = new javax.swing.JFrame();
        CBCLASSPERTT = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        PerT = new javax.swing.JTable();
        ViewPermTT = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        FreePeriods = new javax.swing.JFrame();
        jScrollPane4 = new javax.swing.JScrollPane();
        FREETable = new javax.swing.JTable();
        FREEPERIOD = new javax.swing.JButton();
        CBDayFREE = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        L2 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        CBGradeFREE = new javax.swing.JComboBox<>();
        Login = new javax.swing.JFrame();
        loginBTN = new javax.swing.JButton();
        InvalidLBL = new javax.swing.JLabel();
        PwdLogIn = new javax.swing.JPasswordField();
        NameLogIn = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        DatabaseLabel = new javax.swing.JLabel();
        DatabaseLogIn = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        NewUserRegBtn = new javax.swing.JButton();
        Background1 = new javax.swing.JLabel();
        Registration = new javax.swing.JFrame();
        Name = new javax.swing.JTextField();
        pwd = new javax.swing.JTextField();
        Register = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        ClickHereToLogIn = new javax.swing.JButton();
        CurrentDB = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        BackgroundReg = new javax.swing.JLabel();
        SubsSubstitution = new javax.swing.JFrame();
        jLabel26 = new javax.swing.JLabel();
        LBio = new javax.swing.JLabel();
        LMath = new javax.swing.JLabel();
        LIP = new javax.swing.JLabel();
        Eng = new javax.swing.JTextField();
        Phy = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        Che = new javax.swing.JTextField();
        Bio = new javax.swing.JTextField();
        SubsReset = new javax.swing.JButton();
        Mat = new javax.swing.JTextField();
        Exit1 = new javax.swing.JButton();
        Inf = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        PeriodToBeSubs = new javax.swing.JTextArea();
        jLabel28 = new javax.swing.JLabel();
        Day = new javax.swing.JLabel();
        GetSubTimeTable = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        T1P = new javax.swing.JTextArea();
        jLabel29 = new javax.swing.JLabel();
        SelectedClass = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        T2P = new javax.swing.JTextArea();
        jLabel30 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        SUB = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        T0P = new javax.swing.JTextArea();
        CBCLASSSubs = new javax.swing.JComboBox<>();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        Date = new javax.swing.JTextField();
        jToolBar1 = new javax.swing.JToolBar();
        ENGLISH = new javax.swing.JCheckBox();
        PHYSICS = new javax.swing.JCheckBox();
        CHEMISTRY = new javax.swing.JCheckBox();
        BIOLOGY = new javax.swing.JCheckBox();
        MATH = new javax.swing.JCheckBox();
        ip = new javax.swing.JCheckBox();
        GAMES = new javax.swing.JCheckBox();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        GotoMainScreenSubs = new javax.swing.JButton();
        jScrollPane10 = new javax.swing.JScrollPane();
        SUB1 = new javax.swing.JTable();
        LIP1 = new javax.swing.JLabel();
        Gam = new javax.swing.JTextField();
        PeriodCounter = new javax.swing.JButton();
        jToolBar2 = new javax.swing.JToolBar();
        English = new javax.swing.JCheckBox();
        Physics = new javax.swing.JCheckBox();
        Chemistry = new javax.swing.JCheckBox();
        Biology = new javax.swing.JCheckBox();
        Math = new javax.swing.JCheckBox();
        IP = new javax.swing.JCheckBox();
        Games = new javax.swing.JCheckBox();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        InvisibleFrame = new javax.swing.JFrame();
        jScrollPane11 = new javax.swing.JScrollPane();
        SUB2 = new javax.swing.JTable();
        jScrollPane14 = new javax.swing.JScrollPane();
        InvShowtable = new javax.swing.JTable();
        jScrollPane15 = new javax.swing.JScrollPane();
        TextAreaTableCheckup = new javax.swing.JTextArea();
        ViewSavedTT = new javax.swing.JFrame();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        ViewSavedTTCB = new javax.swing.JComboBox<>();
        GetTTSaved = new javax.swing.JButton();
        jScrollPane12 = new javax.swing.JScrollPane();
        GetTTTable = new javax.swing.JTable();
        GetTTDate = new javax.swing.JTextField();
        GotoMainScreenSubs1 = new javax.swing.JButton();
        ExitViewSavedTT = new javax.swing.JButton();
        ViewSavedTTBackground = new javax.swing.JLabel();
        DeleteTT = new javax.swing.JFrame();
        jScrollPane13 = new javax.swing.JScrollPane();
        TableDelete = new javax.swing.JTable();
        DeleteSavedTT = new javax.swing.JButton();
        Welcome = new javax.swing.JLabel();
        TTM = new javax.swing.JLabel();
        Description = new javax.swing.JLabel();
        READMEbtn = new javax.swing.JButton();
        LoginBtn = new javax.swing.JButton();
        Background = new javax.swing.JLabel();
        APPMenuBar = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        NewUserRegistration = new javax.swing.JMenuItem();
        Substitution = new javax.swing.JMenu();
        GetSubstitution = new javax.swing.JMenuItem();
        SubstitutionHistory = new javax.swing.JMenuItem();
        Utilities = new javax.swing.JMenu();
        ViewPerTT = new javax.swing.JMenuItem();
        Day_SubWiseTT = new javax.swing.JMenuItem();
        FreePTT = new javax.swing.JMenuItem();
        Quit = new javax.swing.JMenu();
        About = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();

        AboutMe.setMinimumSize(new java.awt.Dimension(500, 250));
        AboutMe.setModal(true);
        AboutMe.setResizable(false);

        jLabel12.setText("Mrs. Hema Priya N.");

        jLabel13.setText("National Model Senior Secondary School (CBSE)");

        AbtMeCloseBtn.setText("Close");
        AbtMeCloseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbtMeCloseBtnActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(153, 0, 0));
        jLabel14.setText("Time Table Management System");

        jLabel4.setText("Name: ");

        jLabel5.setText("Class:");

        jLabel6.setText("Application: ");

        jLabel7.setText("Guide Name:");

        jLabel8.setText("School Name:");

        jLabel9.setText("R. Tanuj , V.T.Gowthaman and Aditya Sunani");

        jLabel10.setText("XII ");

        jLabel11.setText("Java NetBean & MySQL");

        javax.swing.GroupLayout AboutMeLayout = new javax.swing.GroupLayout(AboutMe.getContentPane());
        AboutMe.getContentPane().setLayout(AboutMeLayout);
        AboutMeLayout.setHorizontalGroup(
            AboutMeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AboutMeLayout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addGroup(AboutMeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AboutMeLayout.createSequentialGroup()
                        .addGroup(AboutMeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(AboutMeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addGroup(AboutMeLayout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addGap(18, 18, 18)
                                .addComponent(AbtMeCloseBtn))
                            .addComponent(jLabel12)
                            .addComponent(jLabel11)
                            .addComponent(jLabel10)))
                    .addComponent(jLabel14))
                .addGap(24, 24, 24))
        );
        AboutMeLayout.setVerticalGroup(
            AboutMeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AboutMeLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel14)
                .addGap(18, 18, 18)
                .addGroup(AboutMeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AboutMeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AboutMeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AboutMeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel12))
                .addGap(5, 5, 5)
                .addGroup(AboutMeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel8)
                    .addComponent(AbtMeCloseBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ReadMe.setTitle("Read Me First");
        ReadMe.setMinimumSize(new java.awt.Dimension(1400, 750));

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("Welcome!!!\n\nPlease read the following instructions before you start using the Time Table Manager\n\nThe software project is distributed with a backup copy of a Database named TTM with required tables. \nSome records are also present in the tables for testing purposes, which can be deleted before inserting real data. A sql script TTM.sql is provided for this purpose.\nTo install database from TTM.sql, simply follow the following procedure.\n\nStep 1:\nReset the MySql password and make new root password (nmsss), if any other password is given by launching MySQL Server Instance config wizard (StartðProgramsðMySQLðMySQL server instance Config wizard ).\nGive current password and new password as “nmsss” for root user.\n\nStep 2:  \nCopy the TTM.sql file to C:\\Program files\\Mysql\\MySql server 5.1\\Bin folder.\n\nStep 3:\nLoad MySQL and create database named TTM.\nMysql> create database TTM;\n\nStep 4:  \nGo to the DOS prompt (Start & Run & type cmd and press enter) and go to the following folder using CD command of DOS.\n C:\\.....> CD C:\\Program files\\Mysql\\MySql server 5.1\\Bin\n\nStep 5: \nType the following command on above DOS prompt.\nC:\\….\\bin> mysql -u root -pnmsss Library  < TTM.sql\n\nThis will create a library database with tables and records at target machine.\n\n\nNote:\n1. Don’t give space between –p and your password.\n2. The TTM.sql  file must be present in Bin folder.\n\n\nHow to run the Program:\nTo run the software open NetBeans and open the project (File ð Open) and \nbrowse the Library project from the location where the Library project folder exist. \nAfter loading the project choose Run command to run the program.\n");
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout ReadMeLayout = new javax.swing.GroupLayout(ReadMe.getContentPane());
        ReadMe.getContentPane().setLayout(ReadMeLayout);
        ReadMeLayout.setHorizontalGroup(
            ReadMeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReadMeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1376, Short.MAX_VALUE)
                .addContainerGap())
        );
        ReadMeLayout.setVerticalGroup(
            ReadMeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReadMeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 724, Short.MAX_VALUE)
                .addContainerGap())
        );

        DaySubWiseTT.setMinimumSize(new java.awt.Dimension(412, 425));
        DaySubWiseTT.setResizable(false);

        jLabel3.setText("Grade:");

        CBDYDWSB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday" }));

        CBSUBDWSB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "English", "Math", "IP", "Physics", "Chemistry", "Biology", "Games" }));

        L1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        DWSBT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Period", "Day"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(DWSBT);

        DWSBBUTTON.setText("View Day-Wise & Subject-Wise Time Table ");
        DWSBBUTTON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DWSBBUTTONActionPerformed(evt);
            }
        });

        jLabel15.setText("Subject: ");

        jLabel16.setText("Day");

        CBCLASSDWSB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "XI Ant", "XI Atl", "XI Pac", "XII Ant", "XII Atl", "XII Pac" }));

        javax.swing.GroupLayout DaySubWiseTTLayout = new javax.swing.GroupLayout(DaySubWiseTT.getContentPane());
        DaySubWiseTT.getContentPane().setLayout(DaySubWiseTTLayout);
        DaySubWiseTTLayout.setHorizontalGroup(
            DaySubWiseTTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DaySubWiseTTLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CBCLASSDWSB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CBSUBDWSB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CBDYDWSB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
            .addGroup(DaySubWiseTTLayout.createSequentialGroup()
                .addGroup(DaySubWiseTTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DaySubWiseTTLayout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(DaySubWiseTTLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(DWSBBUTTON, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(DaySubWiseTTLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(L1, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        DaySubWiseTTLayout.setVerticalGroup(
            DaySubWiseTTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DaySubWiseTTLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(DaySubWiseTTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CBSUBDWSB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(jLabel3)
                    .addComponent(CBCLASSDWSB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CBDYDWSB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(DWSBBUTTON, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(L1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(68, Short.MAX_VALUE))
        );

        PerTT.setMinimumSize(new java.awt.Dimension(1075, 611));

        CBCLASSPERTT.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "XI Ant", "XI Atl", "XI Pac", "XII Ant", "XII Atl", "XII Pac" }));

        PerT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Period", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(PerT);

        ViewPermTT.setText("Retrieve Permanent Time Table of the Class");
        ViewPermTT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewPermTTActionPerformed(evt);
            }
        });

        jLabel1.setText("Time Table - Grade XI and XII");

        jLabel2.setText("Grade:");

        javax.swing.GroupLayout PerTTLayout = new javax.swing.GroupLayout(PerTT.getContentPane());
        PerTT.getContentPane().setLayout(PerTTLayout);
        PerTTLayout.setHorizontalGroup(
            PerTTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PerTTLayout.createSequentialGroup()
                .addGroup(PerTTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PerTTLayout.createSequentialGroup()
                        .addGap(272, 272, 272)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CBCLASSPERTT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PerTTLayout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 893, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PerTTLayout.createSequentialGroup()
                        .addGap(422, 422, 422)
                        .addComponent(jLabel1))
                    .addGroup(PerTTLayout.createSequentialGroup()
                        .addGap(184, 184, 184)
                        .addComponent(ViewPermTT, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(115, Short.MAX_VALUE))
        );
        PerTTLayout.setVerticalGroup(
            PerTTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PerTTLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(33, 33, 33)
                .addGroup(PerTTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(CBCLASSPERTT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(107, 107, 107)
                .addComponent(ViewPermTT, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(109, Short.MAX_VALUE))
        );

        FreePeriods.setMinimumSize(new java.awt.Dimension(368, 403));
        FreePeriods.setResizable(false);

        FREETable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Period", "Day"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(FREETable);

        FREEPERIOD.setText("Find Free Periods");
        FREEPERIOD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FREEPERIODActionPerformed(evt);
            }
        });

        CBDayFREE.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday" }));

        jLabel17.setText("Day");

        jLabel18.setText("Grade:");

        CBGradeFREE.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "XI Ant", "XI Atl", "XI Pac", "XII Ant", "XII Atl", "XII Pac" }));

        javax.swing.GroupLayout FreePeriodsLayout = new javax.swing.GroupLayout(FreePeriods.getContentPane());
        FreePeriods.getContentPane().setLayout(FreePeriodsLayout);
        FreePeriodsLayout.setHorizontalGroup(
            FreePeriodsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FreePeriodsLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(FreePeriodsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(FREEPERIOD, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(FreePeriodsLayout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CBGradeFREE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CBDayFREE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(L2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(97, Short.MAX_VALUE))
        );
        FreePeriodsLayout.setVerticalGroup(
            FreePeriodsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FreePeriodsLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(FreePeriodsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(CBDayFREE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(CBGradeFREE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(FREEPERIOD, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(L2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        Login.setMinimumSize(new java.awt.Dimension(560, 430));
        Login.setResizable(false);
        Login.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        loginBTN.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.highlight"));
        loginBTN.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        loginBTN.setForeground(new java.awt.Color(102, 255, 102));
        loginBTN.setMnemonic('l');
        loginBTN.setText("Log In");
        loginBTN.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        loginBTN.setBorderPainted(false);
        loginBTN.setContentAreaFilled(false);
        loginBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginBTNActionPerformed(evt);
            }
        });
        Login.getContentPane().add(loginBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 280, 90, 40));

        InvalidLBL.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        InvalidLBL.setForeground(new java.awt.Color(255, 255, 255));
        Login.getContentPane().add(InvalidLBL, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 250, 290, 30));

        PwdLogIn.setEchoChar('$');
        Login.getContentPane().add(PwdLogIn, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 180, 160, -1));
        Login.getContentPane().add(NameLogIn, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 140, 160, -1));

        jLabel21.setFont(new java.awt.Font("Sylfaen", 1, 18)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("Name");
        Login.getContentPane().add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 150, 58, -1));

        jLabel22.setFont(new java.awt.Font("Sylfaen", 1, 18)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText("MySQL Password");
        Login.getContentPane().add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 180, -1, -1));

        DatabaseLabel.setFont(new java.awt.Font("Sylfaen", 1, 18)); // NOI18N
        DatabaseLabel.setForeground(new java.awt.Color(255, 255, 255));
        DatabaseLabel.setText("Database Name");
        Login.getContentPane().add(DatabaseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 220, -1, -1));
        Login.getContentPane().add(DatabaseLogIn, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 220, 160, -1));

        jLabel24.setFont(new java.awt.Font("Monotype Corsiva", 3, 48)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(255, 255, 102));
        jLabel24.setText("Welcome");
        Login.getContentPane().add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 30, -1, 50));

        NewUserRegBtn.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        NewUserRegBtn.setForeground(new java.awt.Color(255, 255, 255));
        NewUserRegBtn.setText("New User ? Not yet Registered? Click here to Register Now!");
        NewUserRegBtn.setBorderPainted(false);
        NewUserRegBtn.setContentAreaFilled(false);
        NewUserRegBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewUserRegBtnActionPerformed(evt);
            }
        });
        Login.getContentPane().add(NewUserRegBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, -1, -1));

        Background1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TTM/BACK2.jpg"))); // NOI18N
        Login.getContentPane().add(Background1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, 430));

        Registration.setMinimumSize(new java.awt.Dimension(510, 270));
        Registration.setResizable(false);
        Registration.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Name.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Name.setForeground(new java.awt.Color(153, 0, 153));
        Registration.getContentPane().add(Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 20, 212, -1));

        pwd.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        pwd.setForeground(new java.awt.Color(153, 0, 153));
        Registration.getContentPane().add(pwd, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 60, 212, 20));

        Register.setFont(new java.awt.Font("Times New Roman", 3, 36)); // NOI18N
        Register.setForeground(new java.awt.Color(255, 255, 204));
        Register.setText("Register");
        Register.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(241, 236, 249), java.awt.Color.pink, new java.awt.Color(153, 0, 153), null));
        Register.setBorderPainted(false);
        Register.setContentAreaFilled(false);
        Register.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterActionPerformed(evt);
            }
        });
        Registration.getContentPane().add(Register, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 140, 140, -1));

        jLabel19.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("Name: ");
        Registration.getContentPane().add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 20, -1, -1));

        jLabel20.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("MySQL Password:");
        Registration.getContentPane().add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 60, -1, -1));

        ClickHereToLogIn.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        ClickHereToLogIn.setForeground(new java.awt.Color(204, 204, 204));
        ClickHereToLogIn.setText("Click here to LogIn");
        ClickHereToLogIn.setBorderPainted(false);
        ClickHereToLogIn.setContentAreaFilled(false);
        ClickHereToLogIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClickHereToLogInActionPerformed(evt);
            }
        });
        Registration.getContentPane().add(ClickHereToLogIn, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 190, -1, -1));
        Registration.getContentPane().add(CurrentDB, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 100, 212, -1));

        jLabel25.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(255, 255, 255));
        jLabel25.setText("Current Database:");
        Registration.getContentPane().add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 100, -1, -1));

        BackgroundReg.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        BackgroundReg.setForeground(new java.awt.Color(255, 255, 255));
        BackgroundReg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TTM/Back8.png"))); // NOI18N
        Registration.getContentPane().add(BackgroundReg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 510, 270));

        SubsSubstitution.setTitle("Substitution Manager ");
        SubsSubstitution.setBackground(new java.awt.Color(153, 255, 255));
        SubsSubstitution.setMinimumSize(new java.awt.Dimension(1469, 625));
        SubsSubstitution.setResizable(false);

        jLabel26.setText("Physics");

        LBio.setText("Biology");

        LMath.setText("Math");

        LIP.setText("IP");

        Eng.setEditable(false);

        Phy.setEditable(false);

        jLabel27.setText("The Subjects to be Substituted with:");

        Che.setEditable(false);

        Bio.setEditable(false);

        SubsReset.setText("Reset");
        SubsReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubsResetActionPerformed(evt);
            }
        });

        Mat.setEditable(false);

        Exit1.setText("Exit Application");
        Exit1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Exit1ActionPerformed(evt);
            }
        });

        Inf.setEditable(false);

        PeriodToBeSubs.setEditable(false);
        PeriodToBeSubs.setColumns(20);
        PeriodToBeSubs.setRows(5);
        PeriodToBeSubs.setText("Subjects to be Substituted:");
        PeriodToBeSubs.setAutoscrolls(false);
        PeriodToBeSubs.setMinimumSize(new java.awt.Dimension(2147483647, 2147483647));
        jScrollPane5.setViewportView(PeriodToBeSubs);

        jLabel28.setText("Day");

        GetSubTimeTable.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        GetSubTimeTable.setForeground(new java.awt.Color(255, 255, 255));
        GetSubTimeTable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TTM/BACK2.jpg"))); // NOI18N
        GetSubTimeTable.setText("Get Substituition Time Table");
        GetSubTimeTable.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        GetSubTimeTable.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        GetSubTimeTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GetSubTimeTableActionPerformed(evt);
            }
        });

        T1P.setEditable(false);
        T1P.setColumns(20);
        T1P.setRows(5);
        T1P.setText("Subjects with One Period:");
        T1P.setAutoscrolls(false);
        T1P.setMinimumSize(new java.awt.Dimension(2147483647, 2147483647));
        jScrollPane6.setViewportView(T1P);

        jLabel29.setText("Grade");

        T2P.setEditable(false);
        T2P.setColumns(20);
        T2P.setRows(5);
        T2P.setText("Subjects with Two Periods:");
        T2P.setAutoscrolls(false);
        T2P.setMinimumSize(new java.awt.Dimension(2147483647, 2147483647));
        jScrollPane7.setViewportView(T2P);

        jLabel30.setText("Selected Grade :");

        SUB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Period", "Day"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane8.setViewportView(SUB);

        T0P.setEditable(false);
        T0P.setColumns(20);
        T0P.setRows(5);
        T0P.setText("Subjects with No Period:");
        T0P.setAutoscrolls(false);
        T0P.setMinimumSize(new java.awt.Dimension(2147483647, 2147483647));
        jScrollPane9.setViewportView(T0P);

        CBCLASSSubs.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "XI Ant", "XI Atl", "XI Pac", "XII Ant", "XII Atl", "XII Pac" }));
        CBCLASSSubs.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                CBCLASSSubsPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        jLabel31.setText("Select the Teachers Unavailable:");

        jLabel32.setText("Date (DD/MM/YYYY)");

        Date.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                DateFocusLost(evt);
            }
        });

        jToolBar1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        ENGLISH.setText("English");
        ENGLISH.setFocusable(false);
        ENGLISH.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        ENGLISH.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(ENGLISH);

        PHYSICS.setText("Physics");
        PHYSICS.setFocusable(false);
        PHYSICS.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        PHYSICS.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(PHYSICS);

        CHEMISTRY.setText("Chemistry");
        CHEMISTRY.setFocusable(false);
        CHEMISTRY.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        CHEMISTRY.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(CHEMISTRY);

        BIOLOGY.setText("Biology");
        BIOLOGY.setFocusable(false);
        BIOLOGY.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        BIOLOGY.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(BIOLOGY);

        MATH.setText("Math");
        MATH.setFocusable(false);
        MATH.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        MATH.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(MATH);

        ip.setText("IP");
        ip.setFocusable(false);
        ip.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        ip.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(ip);

        GAMES.setText("Games");
        GAMES.setFocusable(false);
        GAMES.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        GAMES.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(GAMES);

        jLabel33.setText("English");

        jLabel34.setText("Chemistry");

        GotoMainScreenSubs.setText("Go to Main Screen");
        GotoMainScreenSubs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GotoMainScreenSubsActionPerformed(evt);
            }
        });

        SUB1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Period", "Day"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane10.setViewportView(SUB1);

        LIP1.setText("Games");

        Gam.setEditable(false);

        PeriodCounter.setBorderPainted(false);
        PeriodCounter.setContentAreaFilled(false);
        PeriodCounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PeriodCounterActionPerformed(evt);
            }
        });

        jToolBar2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jToolBar2.setFloatable(false);

        English.setText("English");
        English.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnglishActionPerformed(evt);
            }
        });
        jToolBar2.add(English);

        Physics.setText("Physics");
        Physics.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        Physics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PhysicsActionPerformed(evt);
            }
        });
        jToolBar2.add(Physics);

        Chemistry.setText("Chemistry");
        Chemistry.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Chemistry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChemistryActionPerformed(evt);
            }
        });
        jToolBar2.add(Chemistry);

        Biology.setText("Biology");
        Biology.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Biology.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BiologyActionPerformed(evt);
            }
        });
        jToolBar2.add(Biology);

        Math.setText("Math");
        Math.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Math.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MathActionPerformed(evt);
            }
        });
        jToolBar2.add(Math);

        IP.setText("IP");
        IP.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        IP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IPActionPerformed(evt);
            }
        });
        jToolBar2.add(IP);

        Games.setText("Games");
        Games.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Games.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GamesActionPerformed(evt);
            }
        });
        jToolBar2.add(Games);

        jLabel35.setFont(new java.awt.Font("Lucida Calligraphy", 3, 48)); // NOI18N
        jLabel35.setText("TTM");

        jLabel36.setText("Substituted Time Table");

        jLabel37.setFont(new java.awt.Font("Lucida Calligraphy", 3, 36)); // NOI18N
        jLabel37.setText("Welcome to the Subsitution Wing");

        jLabel38.setText("Original Time Table");

        javax.swing.GroupLayout SubsSubstitutionLayout = new javax.swing.GroupLayout(SubsSubstitution.getContentPane());
        SubsSubstitution.getContentPane().setLayout(SubsSubstitutionLayout);
        SubsSubstitutionLayout.setHorizontalGroup(
            SubsSubstitutionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SubsSubstitutionLayout.createSequentialGroup()
                .addGroup(SubsSubstitutionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SubsSubstitutionLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(SubsSubstitutionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(SubsSubstitutionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Date, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Day, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addComponent(PeriodCounter)
                        .addGap(12, 12, 12)
                        .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(120, 120, 120)
                        .addGroup(SubsSubstitutionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(SubsSubstitutionLayout.createSequentialGroup()
                                .addComponent(GotoMainScreenSubs)
                                .addGap(36, 36, 36)
                                .addComponent(Exit1))
                            .addComponent(jLabel38)))
                    .addGroup(SubsSubstitutionLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(SubsSubstitutionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel33)
                            .addComponent(jLabel26)
                            .addComponent(jLabel34)
                            .addComponent(LBio)
                            .addComponent(LMath)
                            .addComponent(LIP))
                        .addGap(18, 18, 18)
                        .addGroup(SubsSubstitutionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CBCLASSSubs, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Eng, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Phy, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Che, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Bio, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Mat, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Inf, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(SubsSubstitutionLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(LIP1)
                        .addGap(38, 38, 38)
                        .addComponent(Gam, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(118, 118, 118)
                        .addComponent(jLabel30)
                        .addGap(24, 24, 24)
                        .addComponent(SelectedClass, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(570, 570, 570)
                        .addComponent(jLabel36))
                    .addGroup(SubsSubstitutionLayout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(90, 90, 90)
                        .addComponent(GetSubTimeTable, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(SubsSubstitutionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(SubsSubstitutionLayout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addGroup(SubsSubstitutionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel31)
                                    .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel27)
                                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(20, 20, 20))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SubsSubstitutionLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SubsReset, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(225, 225, 225)))
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        SubsSubstitutionLayout.setVerticalGroup(
            SubsSubstitutionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SubsSubstitutionLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(SubsSubstitutionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SubsSubstitutionLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel32)
                        .addGap(1, 1, 1)
                        .addComponent(jLabel28))
                    .addGroup(SubsSubstitutionLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(Date, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(Day, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(SubsSubstitutionLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(PeriodCounter))
                    .addGroup(SubsSubstitutionLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel37))
                    .addComponent(Exit1)
                    .addGroup(SubsSubstitutionLayout.createSequentialGroup()
                        .addComponent(GotoMainScreenSubs)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel38)))
                .addGap(8, 8, 8)
                .addGroup(SubsSubstitutionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SubsSubstitutionLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel29)
                        .addGap(13, 13, 13)
                        .addComponent(jLabel33)
                        .addGap(13, 13, 13)
                        .addComponent(jLabel26)
                        .addGap(13, 13, 13)
                        .addComponent(jLabel34)
                        .addGap(16, 16, 16)
                        .addComponent(LBio)
                        .addGap(13, 13, 13)
                        .addComponent(LMath)
                        .addGap(13, 13, 13)
                        .addComponent(LIP))
                    .addGroup(SubsSubstitutionLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(CBCLASSSubs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(Eng, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(Phy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(Che, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(Bio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(Mat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(Inf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(SubsSubstitutionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LIP1)
                    .addGroup(SubsSubstitutionLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(Gam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(SubsSubstitutionLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel30))
                    .addGroup(SubsSubstitutionLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(SelectedClass, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(SubsSubstitutionLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel36)))
                .addGap(4, 4, 4)
                .addGroup(SubsSubstitutionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SubsSubstitutionLayout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(SubsSubstitutionLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(GetSubTimeTable, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(SubsSubstitutionLayout.createSequentialGroup()
                        .addComponent(jLabel31)
                        .addGap(4, 4, 4)
                        .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SubsReset)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel27)
                        .addGap(4, 4, 4)
                        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        InvisibleFrame.setMinimumSize(new java.awt.Dimension(798, 301));
        InvisibleFrame.setResizable(false);

        SUB2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Period", "Day"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        SUB2.setEnabled(false);
        jScrollPane11.setViewportView(SUB2);

        InvShowtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TablesCount"
            }
        ));
        jScrollPane14.setViewportView(InvShowtable);

        TextAreaTableCheckup.setColumns(20);
        TextAreaTableCheckup.setRows(5);
        jScrollPane15.setViewportView(TextAreaTableCheckup);

        javax.swing.GroupLayout InvisibleFrameLayout = new javax.swing.GroupLayout(InvisibleFrame.getContentPane());
        InvisibleFrame.getContentPane().setLayout(InvisibleFrameLayout);
        InvisibleFrameLayout.setHorizontalGroup(
            InvisibleFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InvisibleFrameLayout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(135, 135, 135))
        );
        InvisibleFrameLayout.setVerticalGroup(
            InvisibleFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InvisibleFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InvisibleFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane15, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ViewSavedTT.setTitle("Saved Time Table Viewer");
        ViewSavedTT.setMinimumSize(new java.awt.Dimension(510, 280));
        ViewSavedTT.setResizable(false);
        ViewSavedTT.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel39.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel39.setForeground(new java.awt.Color(255, 255, 102));
        jLabel39.setText("Date");
        ViewSavedTT.getContentPane().add(jLabel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        jLabel40.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel40.setForeground(new java.awt.Color(255, 255, 102));
        jLabel40.setText("Subject");
        ViewSavedTT.getContentPane().add(jLabel40, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 60, -1, -1));

        ViewSavedTTCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "English", "Physics", "Chemistry", "Biology", "Math", "IP", "Games" }));
        ViewSavedTT.getContentPane().add(ViewSavedTTCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(399, 65, -1, -1));

        GetTTSaved.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        GetTTSaved.setForeground(new java.awt.Color(0, 0, 255));
        GetTTSaved.setText("Get Substitution Time Table ");
        GetTTSaved.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        GetTTSaved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GetTTSavedActionPerformed(evt);
            }
        });
        ViewSavedTT.getContentPane().add(GetTTSaved, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 210, -1, -1));

        GetTTTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "P1", "P2", "P3", "P4", "P5", "P6", "P7", "P8", "P9"
            }
        ));
        jScrollPane12.setViewportView(GetTTTable);

        ViewSavedTT.getContentPane().add(jScrollPane12, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 114, -1, 70));
        ViewSavedTT.getContentPane().add(GetTTDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(75, 65, 88, -1));

        GotoMainScreenSubs1.setText("Go to Main Screen");
        GotoMainScreenSubs1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GotoMainScreenSubs1ActionPerformed(evt);
            }
        });
        ViewSavedTT.getContentPane().add(GotoMainScreenSubs1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 13, -1, -1));

        ExitViewSavedTT.setText("Exit Application");
        ExitViewSavedTT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitViewSavedTTActionPerformed(evt);
            }
        });
        ViewSavedTT.getContentPane().add(ExitViewSavedTT, new org.netbeans.lib.awtextra.AbsoluteConstraints(364, 13, -1, -1));

        ViewSavedTTBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TTM/Back6.jpg"))); // NOI18N
        ViewSavedTT.getContentPane().add(ViewSavedTTBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 510, 280));

        DeleteTT.setMinimumSize(new java.awt.Dimension(500, 500));
        DeleteTT.setResizable(false);

        TableDelete.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        TableDelete.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tables"
            }
        ));
        TableDelete.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane13.setViewportView(TableDelete);

        DeleteSavedTT.setText("Delete Selected Table");
        DeleteSavedTT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteSavedTTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout DeleteTTLayout = new javax.swing.GroupLayout(DeleteTT.getContentPane());
        DeleteTT.getContentPane().setLayout(DeleteTTLayout);
        DeleteTTLayout.setHorizontalGroup(
            DeleteTTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DeleteTTLayout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addGroup(DeleteTTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                    .addComponent(DeleteSavedTT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(133, Short.MAX_VALUE))
        );
        DeleteTTLayout.setVerticalGroup(
            DeleteTTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DeleteTTLayout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(DeleteSavedTT)
                .addContainerGap(129, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Time Table Manager");
        setIconImages(null);
        setMaximumSize(new java.awt.Dimension(1000, 667));
        setMinimumSize(new java.awt.Dimension(1000, 667));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Welcome.setFont(new java.awt.Font("Lucida Bright", 3, 36)); // NOI18N
        Welcome.setForeground(new java.awt.Color(255, 0, 0));
        Welcome.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Welcome.setText("Welcome");
        getContentPane().add(Welcome, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 0, 190, 120));

        TTM.setFont(new java.awt.Font("Arial Black", 3, 48)); // NOI18N
        TTM.setForeground(new java.awt.Color(255, 255, 255));
        TTM.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TTM.setText("Time Table Manager");
        getContentPane().add(TTM, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 540, -1, 60));

        Description.setFont(new java.awt.Font("Times New Roman", 2, 18)); // NOI18N
        Description.setForeground(new java.awt.Color(204, 204, 204));
        Description.setText("Hassle Free!!! Easy to Use!!! Ever Ready!!!");
        getContentPane().add(Description, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 620, 360, 20));

        READMEbtn.setFont(new java.awt.Font("Segoe Print", 3, 18)); // NOI18N
        READMEbtn.setText("Read Me First");
        READMEbtn.setToolTipText("");
        READMEbtn.setBorderPainted(false);
        READMEbtn.setContentAreaFilled(false);
        READMEbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                READMEbtnActionPerformed(evt);
            }
        });
        getContentPane().add(READMEbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 360, -1, -1));

        LoginBtn.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        LoginBtn.setForeground(new java.awt.Color(255, 255, 51));
        LoginBtn.setMnemonic('l');
        LoginBtn.setText("Login");
        LoginBtn.setBorderPainted(false);
        LoginBtn.setContentAreaFilled(false);
        LoginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginBtnActionPerformed(evt);
            }
        });
        getContentPane().add(LoginBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 460, -1, -1));

        Background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TTM/BACK1.jpg"))); // NOI18N
        getContentPane().add(Background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        APPMenuBar.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N

        File.setBackground(new java.awt.Color(0, 0, 204));
        File.setForeground(new java.awt.Color(0, 0, 204));
        File.setText("File");
        File.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N

        NewUserRegistration.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        NewUserRegistration.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        NewUserRegistration.setText("New User Registration");
        NewUserRegistration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewUserRegistrationActionPerformed(evt);
            }
        });
        File.add(NewUserRegistration);

        APPMenuBar.add(File);

        Substitution.setBackground(new java.awt.Color(0, 0, 204));
        Substitution.setForeground(new java.awt.Color(0, 0, 204));
        Substitution.setText("Substitution");
        Substitution.setEnabled(false);
        Substitution.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N

        GetSubstitution.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        GetSubstitution.setText("Substitution Time Table");
        GetSubstitution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GetSubstitutionActionPerformed(evt);
            }
        });
        Substitution.add(GetSubstitution);

        SubstitutionHistory.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        SubstitutionHistory.setText("Substitution History");
        SubstitutionHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubstitutionHistoryActionPerformed(evt);
            }
        });
        Substitution.add(SubstitutionHistory);

        APPMenuBar.add(Substitution);

        Utilities.setForeground(new java.awt.Color(0, 0, 204));
        Utilities.setText("Utilities");
        Utilities.setEnabled(false);
        Utilities.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N

        ViewPerTT.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        ViewPerTT.setText("View Permanent Time Table");
        ViewPerTT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewPerTTActionPerformed(evt);
            }
        });
        Utilities.add(ViewPerTT);

        Day_SubWiseTT.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        Day_SubWiseTT.setText("Day-Wise and Subject-Wise Time Table");
        Day_SubWiseTT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Day_SubWiseTTActionPerformed(evt);
            }
        });
        Utilities.add(Day_SubWiseTT);

        FreePTT.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        FreePTT.setText("View Free Periods only");
        FreePTT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FreePTTActionPerformed(evt);
            }
        });
        Utilities.add(FreePTT);

        APPMenuBar.add(Utilities);

        Quit.setBackground(new java.awt.Color(0, 0, 204));
        Quit.setForeground(new java.awt.Color(0, 0, 204));
        Quit.setText("Quit");
        Quit.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N

        About.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        About.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        About.setText("About ");
        About.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutActionPerformed(evt);
            }
        });
        Quit.add(About);

        Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        Exit.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        Exit.setText("Exit application");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        Quit.add(Exit);

        APPMenuBar.add(Quit);

        setJMenuBar(APPMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents
/*End of AutoGenerated Code*/
    
    private void AbtMeCloseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbtMeCloseBtnActionPerformed
/*Button to close the About Me Dialog*/
AboutMe.setVisible(false);
    }//GEN-LAST:event_AbtMeCloseBtnActionPerformed

    private void READMEbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_READMEbtnActionPerformed
/*Button to make Read Me Dialog Visible*/
ReadMe.setVisible(true);
    }//GEN-LAST:event_READMEbtnActionPerformed

    private void DWSBBUTTONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DWSBBUTTONActionPerformed
/*Button to view DayWise and SubjectWise Time Table of a Class*/
    L1.setText("");
    DefaultTableModel modelDWSB =(DefaultTableModel) DWSBT.getModel();  modelDWSB.setRowCount(0);
    int selclassDWSB = CBCLASSDWSB.getSelectedIndex();
    String Selectedclass = (String)CBCLASSDWSB.getSelectedItem();
    String SELCLASSDWSB = null,SUBSEL = null;
    String dysel = (String) CBDYDWSB.getSelectedItem();
        switch (selclassDWSB)
        {
            case 0 : SELCLASSDWSB = "xiant";break;
            case 1 : SELCLASSDWSB = "xiatl";break;
            case 2 : SELCLASSDWSB = "xipac";break;
            case 3 : SELCLASSDWSB = "xiiant";break;
            case 4 : SELCLASSDWSB = "xiiatl";break;
            case 5 : SELCLASSDWSB = "xiipac";break;
            default :JOptionPane.showMessageDialog(this,"Dear User,Please select a class!!!");break;
        }

        /*Connection to My-SQL*/
        try{
            Class.forName("com.mysql.jdbc.Driver");
            Connection con1=DriverManager.getConnection("jdbc:mysql://localhost:3306/"+DBName,"root",MySQLPass);
            Statement stmt1=con1.createStatement();
            String query1 = "Select Period , " + dysel + " from " + SELCLASSDWSB + "  ; ";
            ResultSet rs=stmt1.executeQuery(query1);
           
            while(rs.next())/*Loop to retrieve rows from SQL*/
            {
             String p = rs.getString("Period");
             String day = rs.getString(""+dysel);
             modelDWSB.addRow(new Object[] {p,day});
            }
            
            rs.close();
            stmt1.close();
            con1.close();
            }
        
        catch(Exception e){JOptionPane.showMessageDialog(this,e.getMessage());}

        {
        if(CBSUBDWSB.getSelectedIndex()== 0)
            {L1.setText("Now Showing All Periods of Grade "+ Selectedclass + " on " + dysel + " ");}
        else
            {
            SUBSEL =(String)CBSUBDWSB.getSelectedItem();
            L1.setText("Now Showing "+ SUBSEL + " Period(s) of Grade "+ Selectedclass + " on " + dysel + " ");
            }
        }
        
        if (DWSBT.getRowCount() <=2 )JOptionPane.showMessageDialog(this,"Dear User,The Timetable is not yet updated");
        else{
            if(CBSUBDWSB.getSelectedIndex()== 0){;}
            else
                {
                    if(CBSUBDWSB.getSelectedIndex()== 6)
                        {
                            for (int rono = 0; rono<9;rono++)   
                                {
                                    String CellValue = (String) modelDWSB.getValueAt(rono,1);
                                        if (CellValue.contains("/Games")){;}   
                                        else {modelDWSB.setValueAt("-",rono,1);}
                                }
                        }
                    else
                        {
                            for (int rono = 0; rono<9;rono++)
                                {
                                    String CellValue = (String) modelDWSB.getValueAt(rono,1);
                                    if (CellValue.equals(""+SUBSEL)){;} else {modelDWSB.setValueAt("-",rono,1);}} }
                                }
            }
    }//GEN-LAST:event_DWSBBUTTONActionPerformed

    private void ViewPermTTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewPermTTActionPerformed
       /*Button to View the Permanent Time Table of a Class*/
        DefaultTableModel modelPerTT =(DefaultTableModel)PerT.getModel(); modelPerTT.setRowCount(0);
        DefaultTableModel modelT1 =(DefaultTableModel) PerT.getModel(); modelT1.setRowCount(0);
        int selclassPERTT = CBCLASSPERTT.getSelectedIndex();
        String SELCLASSPERTT = null;
        switch (selclassPERTT){
            case 0 : SELCLASSPERTT = "xiant";break;
            case 1 : SELCLASSPERTT = "xiatl";break;
            case 2 : SELCLASSPERTT = "xipac";break;
            case 3 : SELCLASSPERTT = "xiiant";break;
            case 4 : SELCLASSPERTT = "xiiatl";break;
            case 5 : SELCLASSPERTT = "xiipac";break;
            default :JOptionPane.showMessageDialog(this,"Dear User,Please select a class!!!");break;
                              }
        /*Connection to My-SQL*/
        try{
            Class.forName("com.mysql.jdbc.Driver");
            Connection conPTT=DriverManager.getConnection("jdbc:mysql://localhost:3306/"+DBName,"root",MySQLPass);
            Statement stmtPTT=conPTT.createStatement();
            String queryPTT = "select * from " + SELCLASSPERTT + "  ; ";
            ResultSet rsPTT=stmtPTT.executeQuery(queryPTT);
            while(rsPTT.next())
            {   String p = rsPTT.getString("Period");
                String mon = rsPTT.getString("Monday");
                String tue = rsPTT.getString("Tuesday");
                String wed = rsPTT.getString("Wednesday");
                String thu = rsPTT.getString("Thursday");
                String fri = rsPTT.getString("Friday");
                modelPerTT.addRow(new Object[] {p,mon,tue,wed,thu,fri});
            }
            rsPTT.close();
            stmtPTT.close();
            conPTT.close();
            }
        catch(Exception ePTT){JOptionPane.showMessageDialog(this,ePTT.getMessage());}
/*To ensure updation of the Table*/        
        if (PerT.getRowCount() <=2 )JOptionPane.showMessageDialog(this,"Dear User,The Timetable is not yet updated");
    }//GEN-LAST:event_ViewPermTTActionPerformed

    private void ViewPerTTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewPerTTActionPerformed
/*Menu Item to Open the Permanent Time Table Frame*/
DefaultTableModel modelPerTT =(DefaultTableModel) PerT.getModel();
modelPerTT.setRowCount(0);
PerTT.setVisible(true);
    }//GEN-LAST:event_ViewPerTTActionPerformed

    private void Day_SubWiseTTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Day_SubWiseTTActionPerformed
/*Menu Item to Open the Day-Wise and Subject-Wise Time Table Frame*/
DefaultTableModel modelT2 =(DefaultTableModel) DWSBT.getModel(); modelT2.setRowCount(0);
DaySubWiseTT.setVisible(true);
    }//GEN-LAST:event_Day_SubWiseTTActionPerformed

    private void FREEPERIODActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FREEPERIODActionPerformed
/*Button to View only the Free Periods of a Class*/    
    L1.setText("");
    DefaultTableModel modelFREE =(DefaultTableModel)FREETable.getModel();modelFREE.setRowCount(0);
    int selclassFREE = CBGradeFREE.getSelectedIndex();
    String SELCLASSFREE = "";
    String SelectedclassFREE = (String)CBGradeFREE.getSelectedItem();
    String dyselFREE = (String) CBDayFREE.getSelectedItem();
       
        switch (selclassFREE){
            case 0 : SELCLASSFREE = "xiant";break;
            case 1 : SELCLASSFREE = "xiatl";break;
            case 2 : SELCLASSFREE = "xipac";break;
            case 3 : SELCLASSFREE = "xiiant";break;
            case 4 : SELCLASSFREE = "xiiatl";break;
            case 5 : SELCLASSFREE = "xiipac";break;
            default :JOptionPane.showMessageDialog(this,"Dear User,Please select a class!!!");break;
                             }

/*Connection to My-SQL*/        
        try{
            Class.forName("com.mysql.jdbc.Driver");
            Connection conFREE=DriverManager.getConnection("jdbc:mysql://localhost:3306/"+DBName,"root",MySQLPass);
            Statement stmtFREE=conFREE.createStatement();
            String queryFREE = "Select Period , " + dyselFREE + " from " + SELCLASSFREE + "  ; ";
            ResultSet rsFREE=stmtFREE.executeQuery(queryFREE);
            
            while(rsFREE.next())
                {String p = rsFREE.getString("Period");
                String day = rsFREE.getString(""+dyselFREE);
                modelFREE.addRow(new Object[] {p,day});
                }
            
            rsFREE.close();
            stmtFREE.close();
            conFREE.close();
            }
        catch(Exception eFREE){JOptionPane.showMessageDialog(this,eFREE.getMessage());}

        L1.setText("Now Showing Free Period(s) of Grade "+ SelectedclassFREE + " on " + dyselFREE + " ");
        {
        if (FREETable.getRowCount() <=2 )JOptionPane.showMessageDialog(this,"Dear User,The Timetable is not yet updated");
        else{
            for (int rono = 0; rono<9;rono++)
                {
                String CellValue = (String) modelFREE.getValueAt(rono,1);
                if (CellValue.equals(null)|| CellValue.equals("") || CellValue.equals("FREE"))
                {modelFREE.setValueAt("FREE",rono,1);} else {modelFREE.setValueAt("ENGAGED",rono,1);}
                }

            }
        }
    }//GEN-LAST:event_FREEPERIODActionPerformed

    private void FreePTTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FreePTTActionPerformed
/*Menu Item to open the Free Periods frame*/
DefaultTableModel modelFREE =(DefaultTableModel) 
        FREETable.getModel();
        modelFREE.setRowCount(0);
        FreePeriods.setVisible(true);
    }//GEN-LAST:event_FreePTTActionPerformed

    private void RegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegisterActionPerformed
/*Button to register new users*/
        DBName = (String) CurrentDB.getText();
try {
            Class.forName("java.sql.Driver");
            Connection conn=DriverManager.getConnection("jdbc:mysql://localhost:3306/"+DBName,"root",MySQLPass);
            Statement stmt = conn.createStatement();
            String sql = "Insert into LogIn values ( '" + Name.getText() + "' , '" + pwd.getText() + "' )";
            stmt.executeUpdate(sql);
            stmt.close();
            conn.close();
    }
        catch( Exception eReg){JOptionPane.showMessageDialog(this,eReg);}
Registration.setVisible(false); 
    }//GEN-LAST:event_RegisterActionPerformed

    private void loginBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginBTNActionPerformed
/*Button to Log In into the application*/
        DBName = DatabaseLogIn.getText();
        String PWord = new String(PwdLogIn.getPassword());
        String Id = NameLogIn.getText();
        try   {
            Class.forName("java.sql.Driver");
            Connection conn=DriverManager.getConnection("jdbc:mysql://localhost:3306/"+DBName,"root",MySQLPass);
            Statement stmt = conn.createStatement();
            stmt = conn.createStatement();
            String sql = "select * from LogIn where ID = '" + Id + "'";
            ResultSet rs = stmt.executeQuery(sql);
            rs.next();
            String str = rs.getString("Password");
            if(str.equals(PWord))
            {
               Substitution.setEnabled(true);
               Utilities.setEnabled(true);
               Login.setVisible(false);
               MySQLPass  = new String(PwdLogIn.getPassword());
               DBName = (String) DatabaseLogIn.getText();
               JOptionPane.showMessageDialog(this,"Logged in successfully!!!");
               String SQLTimeDate = "select curtime(),curdate() ;" ;
               Statement stmtTimeDate = conn.createStatement();
               ResultSet rsTimeDate = stmtTimeDate.executeQuery(SQLTimeDate);
               rsTimeDate.next();
               String CurrentTime = rsTimeDate.getString("curtime()");
               String CurrentDate = rsTimeDate.getString("curdate()");
               String SQLUserHistory = "Insert into UserHistory values ( '" +Id+"','"+PWord+"','"+CurrentTime+"','"+CurrentDate+"','"+ DBName +"');";
               stmtTimeDate.executeUpdate(SQLUserHistory);     
               rsTimeDate.close();
            }
            else
            {
                InvalidLBL.setText("Incorrect Password or ID !!!");
            }
        rs.close();
        
        } catch (Exception e) {/*JOptionPane.showMessageDialog(Login,e.getMessage());*/;}
    }//GEN-LAST:event_loginBTNActionPerformed

    private void NewUserRegBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewUserRegBtnActionPerformed
/*Button to open the registration frame*/
        Registration.setVisible(true);
        Login.setVisible(false);
    }//GEN-LAST:event_NewUserRegBtnActionPerformed

    private void ClickHereToLogInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClickHereToLogInActionPerformed
/*Button to open the Log-In Frame*/
        Registration.setVisible(false);
        Login.setVisible(true);
    }//GEN-LAST:event_ClickHereToLogInActionPerformed

    private void LoginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginBtnActionPerformed
/*Button to open the Log-In Frame*/
        Login.setVisible(true);
    }//GEN-LAST:event_LoginBtnActionPerformed

    private void NewUserRegistrationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewUserRegistrationActionPerformed
/*Button to open the registration frame*/
        Registration.setVisible(true);
    }//GEN-LAST:event_NewUserRegistrationActionPerformed

    private void SubsResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubsResetActionPerformed
       /*Button to reset all the check boxes to their original state...*/
        English.setVisible(true);
        Physics.setVisible(true);
        Chemistry.setVisible(true);
        Biology.setVisible(true);
        Math.setVisible(true);
        IP.setVisible(true);
        Games.setVisible(true);
        ENGLISH.setVisible(true);
        PHYSICS.setVisible(true);
        CHEMISTRY.setVisible(true);
        BIOLOGY.setVisible(true);
        MATH.setVisible(true);
        ip.setVisible(true);
        GAMES.setVisible(true);
        English.setSelected(false);
        Physics.setSelected(false);
        Chemistry.setSelected(false);
        Biology.setSelected(false);
        Math.setSelected(false);
        IP.setSelected(false);
        Games.setSelected(false);
        ENGLISH.setSelected(false);
        PHYSICS.setSelected(false);
        CHEMISTRY.setSelected(false);
        BIOLOGY.setSelected(false);
        MATH.setSelected(false);
        ip.setSelected(false);
        GAMES.setSelected(false);
        if(SELCLASS.equals("xiant") || SELCLASS.equals("xiiant")){ip.setVisible(false);LIP.setVisible(false);Inf.setVisible(false);IP.setVisible(false);}
        if(SELCLASS.equals("xipac") || SELCLASS.equals("xiipac")){MATH.setVisible(false);LMath.setVisible(false);Mat.setVisible(false);Math.setVisible(false);}
        if(SELCLASS.equals("xiatl") || SELCLASS.equals("xiiatl")){BIOLOGY.setVisible(false);LBio.setVisible(false);Bio.setVisible(false);Biology.setVisible(false);}
    }//GEN-LAST:event_SubsResetActionPerformed

    private void Exit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Exit1ActionPerformed
/*Button to exit the Application*/        
        System.exit(0);
    }//GEN-LAST:event_Exit1ActionPerformed

    private void GetSubTimeTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GetSubTimeTableActionPerformed
/*Button to get the substitiution  Time Table*/        
        PeriodCounter.doClick();
        
        String[] SUBSEL = new String[7];
        for(int reset = 0;reset<=6;reset++){SUBSEL[reset] = null;}
        String DAY = Day.getText();
        PeriodToBeSubs.setText("Subjects to be Substituted: \n");
        if(English.isSelected()){PeriodToBeSubs.append("\n English"); SUBSEL[0]="English";};
        if(Physics.isSelected()){PeriodToBeSubs.append("\n Physics"); SUBSEL[1]="Physics";};
        if(Chemistry.isSelected()){PeriodToBeSubs.append("\n Chemistry"); SUBSEL[2]="Chemistry";};
        if(Biology.isSelected()){PeriodToBeSubs.append("\n Biology"); SUBSEL[3]="Biology";};
        if(Math.isSelected()){PeriodToBeSubs.append("\n Math"); SUBSEL[4]="Math";};
        if(IP.isSelected()){PeriodToBeSubs.append("\n IP"); SUBSEL[5]="IP";};
        if(Games.isSelected()){PeriodToBeSubs.append("\n Games"); SUBSEL[6]="Games";};

        DefaultTableModel modelSub =(DefaultTableModel)  SUB.getModel();  modelSub.setRowCount(0);
        DefaultTableModel modelSub1 =(DefaultTableModel) SUB1.getModel(); modelSub1.setRowCount(0);
        DefaultTableModel modelSub2 =(DefaultTableModel) SUB2.getModel(); modelSub2.setRowCount(0);
        int selclassSubs = CBCLASSSubs.getSelectedIndex();
        String SelectedclassSubs = (String)CBCLASSSubs.getSelectedItem();
        String SELCLASSSubs = null;
        switch (selclassSubs){
            case 0 : SELCLASSSubs = "xiant";break;
            case 1 : SELCLASSSubs = "xiatl";break;
            case 2 : SELCLASSSubs= "xipac";break;
            case 3 : SELCLASSSubs = "xiiant";break;
            case 4 : SELCLASSSubs = "xiiatl";break;
            case 5 : SELCLASSSubs = "xiipac";break;
            default :JOptionPane.showMessageDialog(this,"Dear User,Please select a class!!!");break;
        }

        try{
           Class.forName("com.mysql.jdbc.Driver");
           Connection conSubs=DriverManager.getConnection("jdbc:mysql://localhost:3306/"+DBName,"root",MySQLPass);
            Statement stmtSubs=conSubs.createStatement();
            String query1 = "Select Period , " + DAY + " from " + SELCLASSSubs + "  ; ";
            ResultSet rsSubs=stmtSubs.executeQuery(query1);
            while(rsSubs.next())
            {String p = rsSubs.getString("Period");
                String day = rsSubs.getString(""+DAY);
                modelSub.addRow(new Object[] {p,day});}
           ResultSet rsSubs1=stmtSubs.executeQuery(query1);
           
           while(rsSubs1.next())
            {String p = rsSubs1.getString("Period");
                String day = rsSubs1.getString(""+DAY);
                modelSub1.addRow(new Object[] {p,day});}
           
           

        if (SUB.getRowCount() <=2 )JOptionPane.showMessageDialog(this,"Dear User,The Timetable is not yet updated");
        else{
             
                for (int rono = 0; rono<9;rono++)
                    {
                        String CellValue = (String) modelSub.getValueAt(rono,1);
                            for (int subcount=0;subcount<=6;subcount++)
                                {
                                    if (CellValue.contains(""+SUBSEL[subcount])){modelSub.setValueAt("Staff_Unavailable",rono,1);}
                                     if (CellValue.contains(""+SUBSEL[subcount])){modelSub1.setValueAt("Staff_Unavailable",rono,1);} 
                                }
                    
                    }}
            
        
        
        
/* For English Subs*/
        
                if(ENGLISH.isSelected()){
                                    String queryEnglish = "Select Period , " + DAY + " from English " + "  ; ";
                                     ResultSet rsSubsEng =stmtSubs.executeQuery(queryEnglish);
                                      while(rsSubsEng.next())
                                         {
                                             String p = rsSubsEng.getString("Period");
                                             String day = rsSubsEng.getString(""+DAY);
                                                 modelSub2.addRow(new Object[] {p,day});
                                         } 
                                     rsSubsEng.close();
                                     String[] EngToday = new String[10];       
                                     for (int rono=0;rono<9&&EnglishPeriod<=2;rono++)
                                              {
                                                String CellValue1  = (String) modelSub1.getValueAt(rono,1);
                                                String CellValue2 = (String) modelSub2.getValueAt(rono,1);
                                                if (CellValue1.contains("Staff_Unavailable") && CellValue2.equals("FREE") ){modelSub1.setValueAt("English",rono,1); modelSub2.setValueAt(""+SelectedclassSubs,rono,1); EnglishPeriod = EnglishPeriod + 1;}                                      
                                                Eng.setText("");
                                                Eng.setText( " " + EnglishPeriod + "  Period(s)"); 
                                              }
                                     for (int rono1=0;rono1<9;rono1++){EngToday[rono1]= (String) modelSub2.getValueAt(rono1,1);} 
                                     String querydrop = "DROP TABLE IF EXISTS "+ Date.getText().replaceAll("/","") + "$$$English" +" ;";
                                     stmtSubs.executeUpdate(querydrop);                                       
                                        String queryEnglishSubT = "CREATE TABLE " + Date.getText().replaceAll("/","") + "$$$English" + "( P1 varchar(50) UNIQUE,P2 varchar(50),P3 varchar(50),P4 varchar(50),P5 varchar(50),P6 varchar(50),P7 varchar(50),P8 varchar(50),P9 varchar(50));" ;
                                        String queryEnglishSubTInsert = "INSERT INTO "+ Date.getText().replaceAll("/","") + "$$$English VALUES ( '" + EngToday[0] + "' ,'" + EngToday[1] + "' ,'" + EngToday[2] + "' ,'" + EngToday[3] + "' , '"+ EngToday[4] + "' , '"+ EngToday[5] + "' , '"+ EngToday[6] + "' ,'"+ EngToday[7] + "' , '"+ EngToday[8] + "' );" ;
                                          stmtSubs.executeUpdate(queryEnglishSubT); 
                                          stmtSubs.executeUpdate(queryEnglishSubTInsert);
                                          
                                          modelSub2.setRowCount(0);
                                        }
                
                
/* For Physics Subs*/        
                
        
        if(PHYSICS.isSelected()){
                                    String queryPhysics = "Select Period , " + DAY + " from Physics " + "  ; ";
                                     ResultSet rsSubsPhysics =stmtSubs.executeQuery(queryPhysics);
                                      while(rsSubsPhysics.next())
                                         {
                                             String p = rsSubsPhysics.getString("Period");
                                             String day = rsSubsPhysics.getString(""+DAY);
                                                 modelSub2.addRow(new Object[] {p,day});
                                         } 
                                     rsSubsPhysics.close();
                                     String[] PhysicsToday = new String[10];       
                                     for (int rono=0;rono<9&&PhysicsPeriod<=3;rono++)
                                              {
                                                String CellValue1  = (String) modelSub1.getValueAt(rono,1);
                                                String CellValue2 = (String) modelSub2.getValueAt(rono,1);
                                                if (CellValue1.contains("Staff_Unavailable") && CellValue2.equals("FREE") ){modelSub1.setValueAt("Physics",rono,1); modelSub2.setValueAt(""+SelectedclassSubs,rono,1); PhysicsPeriod = PhysicsPeriod + 1;}                                      
                                                Phy.setText("");
                                                Phy.setText( " " + PhysicsPeriod + "  Period(s)"); 
                                              }
                                     for (int rono1=0;rono1<9;rono1++){PhysicsToday[rono1]= (String) modelSub2.getValueAt(rono1,1);} 
                                      String querydrop = "DROP TABLE IF EXISTS "+ Date.getText().replaceAll("/","") + "$$$Physics" +" ;";
                                          stmtSubs.executeUpdate(querydrop);
                                        String queryPhysicsSubT = "CREATE TABLE " + Date.getText().replaceAll("/","") + "$$$Physics" + "( P1 varchar(50) UNIQUE,P2 varchar(50),P3 varchar(50),P4 varchar(50),P5 varchar(50),P6 varchar(50),P7 varchar(50),P8 varchar(50),P9 varchar(50));" ;
                                        String queryPhysicsSubTInsert = "INSERT INTO "+ Date.getText().replaceAll("/","") + "$$$Physics VALUES ( '" + PhysicsToday[0] + "' ,'" + PhysicsToday[1] + "' ,'" + PhysicsToday[2] + "' ,'" + PhysicsToday[3] + "' , '"+ PhysicsToday[4] + "' , '"+ PhysicsToday[5] + "' , '"+ PhysicsToday[6] + "' ,'"+ PhysicsToday[7] + "' , '"+ PhysicsToday[8] + "' );" ;
                                          stmtSubs.executeUpdate(queryPhysicsSubT); 
                                          stmtSubs.executeUpdate(queryPhysicsSubTInsert); 
                                          
                                          modelSub2.setRowCount(0);
                                        }
                
                
/* For Chemistry Subs*/
                
                 if(CHEMISTRY.isSelected()){
                                    String queryChemistry = "Select Period , " + DAY + " from Chemistry " + "  ; ";
                                     ResultSet rsSubsChemistry =stmtSubs.executeQuery(queryChemistry);
                                      while(rsSubsChemistry.next())
                                         {
                                             String p = rsSubsChemistry.getString("Period");
                                             String day = rsSubsChemistry.getString(""+DAY);
                                                 modelSub2.addRow(new Object[] {p,day});
                                         } 
                                     rsSubsChemistry.close();
                                     String[] ChemistryToday = new String[10];       
                                     for (int rono=0;rono<9&&ChemistryPeriod<=3;rono++)
                                              {
                                                String CellValue1  = (String) modelSub1.getValueAt(rono,1);
                                                String CellValue2 = (String) modelSub2.getValueAt(rono,1);
                                                if (CellValue1.contains("Staff_Unavailable") && CellValue2.equals("FREE") ){modelSub1.setValueAt("Chemistry",rono,1); modelSub2.setValueAt(""+SelectedclassSubs,rono,1); ChemistryPeriod = ChemistryPeriod + 1;}                                      
                                                Che.setText("");
                                                Che.setText( " " + ChemistryPeriod + "  Period(s)"); 
                                              }
                                      for (int rono1=0;rono1<9;rono1++){ChemistryToday[rono1]= (String) modelSub2.getValueAt(rono1,1);} 
                                      
                                      String querydrop = "DROP TABLE IF EXISTS "+ Date.getText().replaceAll("/","") + "$$$Chemistry" +" ;";
                                         
                                      stmtSubs.executeUpdate(querydrop);
                                          
                                        String queryChemistrySubT = "CREATE TABLE " + Date.getText().replaceAll("/","") + "$$$Chemistry" + "( P1 varchar(50) UNIQUE,P2 varchar(50),P3 varchar(50),P4 varchar(50),P5 varchar(50),P6 varchar(50),P7 varchar(50),P8 varchar(50),P9 varchar(50));" ;
                                        String queryChemistrySubTInsert = "INSERT INTO "+ Date.getText().replaceAll("/","") + "$$$Chemistry VALUES ( '" + ChemistryToday[0] + "' ,'" + ChemistryToday[1] + "' ,'" + ChemistryToday[2] + "' ,'" + ChemistryToday[3] + "' , '"+ ChemistryToday[4] + "' , '"+ ChemistryToday[5] + "' , '"+ ChemistryToday[6] + "' ,'"+ ChemistryToday[7] + "' , '"+ ChemistryToday[8] + "' );" ;
                                          stmtSubs.executeUpdate(queryChemistrySubT); 
                                          stmtSubs.executeUpdate(queryChemistrySubTInsert);
                                          
                                      modelSub2.setRowCount(0);
                                  }
                
                
/* For Math Subs*/
                
                 if(MATH.isSelected()){
                                    String queryMath = "Select Period , " + DAY + " from Math " + "  ; ";
                                     ResultSet rsSubsMath =stmtSubs.executeQuery(queryMath);
                                      while(rsSubsMath.next())
                                         {
                                             String p = rsSubsMath.getString("Period");
                                             String day = rsSubsMath.getString(""+DAY);
                                                 modelSub2.addRow(new Object[] {p,day});
                                         } 
                                     rsSubsMath.close();
                                     String[] MathToday = new String[10];       
                                     for (int rono=0;rono<9&&MathPeriod<=3;rono++)
                                              {
                                                String CellValue1  = (String) modelSub1.getValueAt(rono,1);
                                                String CellValue2 = (String) modelSub2.getValueAt(rono,1);
                                                if (CellValue1.contains("Staff_Unavailable") && CellValue2.equals("FREE") ){modelSub1.setValueAt("Math",rono,1); modelSub2.setValueAt(""+SelectedclassSubs,rono,1); MathPeriod = MathPeriod + 1;}                                      
                                                Mat.setText("");
                                                Mat.setText( " " + MathPeriod + "  Period(s)"); 
                                              }
                                     for (int rono1=0;rono1<9;rono1++){MathToday[rono1]= (String) modelSub2.getValueAt(rono1,1);} 
                                      String querydrop = "DROP TABLE IF EXISTS "+ Date.getText().replaceAll("/","") + "$$$Math" +" ;";
                                          stmtSubs.executeUpdate(querydrop);
                                        String queryMathSubT = "CREATE TABLE " + Date.getText().replaceAll("/","") + "$$$Math" + "( P1 varchar(50) UNIQUE,P2 varchar(50),P3 varchar(50),P4 varchar(50),P5 varchar(50),P6 varchar(50),P7 varchar(50),P8 varchar(50),P9 varchar(50));" ;
                                        String queryMathSubTInsert = "INSERT INTO "+ Date.getText().replaceAll("/","") + "$$$Math VALUES ( '" + MathToday[0] + "' ,'" + MathToday[1] + "' ,'" + MathToday[2] + "' ,'" + MathToday[3] + "' , '"+ MathToday[4] + "' , '"+ MathToday[5] + "' , '"+ MathToday[6] + "' ,'"+ MathToday[7] + "' , '"+ MathToday[8] + "' );" ;
                                          stmtSubs.executeUpdate(queryMathSubT); 
                                          stmtSubs.executeUpdate(queryMathSubTInsert);
                                          
                                      modelSub2.setRowCount(0);
                                      
                                        }
                
                
/* For IP Subs*/
                
                if(ip.isSelected()){
                                    String queryIP = "Select Period , " + DAY + " from IP " + "  ; ";
                                     ResultSet rsSubsIP =stmtSubs.executeQuery(queryIP);
                                      while(rsSubsIP.next())
                                         {
                                             String p = rsSubsIP.getString("Period");
                                             String day = rsSubsIP.getString(""+DAY);
                                                 modelSub2.addRow(new Object[] {p,day});
                                         } 
                                     rsSubsIP.close();
                                     String[] IPToday = new String[10];       
                                     for (int rono=0;rono<9&&IPPeriod<=3;rono++)
                                              {
                                                String CellValue1  = (String) modelSub1.getValueAt(rono,1);
                                                String CellValue2 = (String) modelSub2.getValueAt(rono,1);
                                                if (CellValue1.contains("Staff_Unavailable") && CellValue2.equals("FREE") ){modelSub1.setValueAt("IP",rono,1); modelSub2.setValueAt(""+SelectedclassSubs,rono,1); IPPeriod = IPPeriod + 1;}                                      
                                                Inf.setText("");
                                                Inf.setText( " " + IPPeriod + "  Period(s)"); 
                                              }
                                     for (int rono1=0;rono1<9;rono1++){IPToday[rono1]= (String) modelSub2.getValueAt(rono1,1);} 
                                      String querydrop = "DROP TABLE IF EXISTS "+ Date.getText().replaceAll("/","") + "$$$IP" +" ;";
                                          stmtSubs.executeUpdate(querydrop); 
                                        String queryIPSubT = "CREATE TABLE " + Date.getText().replaceAll("/","") + "$$$IP" + "( P1 varchar(50) UNIQUE,P2 varchar(50),P3 varchar(50),P4 varchar(50),P5 varchar(50),P6 varchar(50),P7 varchar(50),P8 varchar(50),P9 varchar(50));" ;
                                        String queryIPSubTInsert = "INSERT INTO "+ Date.getText().replaceAll("/","") + "$$$IP VALUES ( '" + IPToday[0] + "' ,'" + IPToday[1] + "' ,'" + IPToday[2] + "' ,'" + IPToday[3] + "' , '"+ IPToday[4] + "' , '"+ IPToday[5] + "' , '"+ IPToday[6] + "' ,'"+ IPToday[7] + "' , '"+ IPToday[8] + "' );" ;
                                          stmtSubs.executeUpdate(queryIPSubT); 
                                          stmtSubs.executeUpdate(queryIPSubTInsert);
                                                                               
                                          modelSub2.setRowCount(0);
                                        }
                
/* For Biology Subs*/
                if(BIOLOGY.isSelected()){
                                    String queryBiology = "Select Period , " + DAY + " from Biology " + "  ; ";
                                     ResultSet rsSubsBiology =stmtSubs.executeQuery(queryBiology);
                                      while(rsSubsBiology.next())
                                         {
                                             String p = rsSubsBiology.getString("Period");
                                             String day = rsSubsBiology.getString(""+DAY);
                                                 modelSub2.addRow(new Object[] {p,day});
                                         } 
                                     rsSubsBiology.close();
                                     String[] BiologyToday = new String[10];       
                                     for (int rono=0;rono<9&&BiologyPeriod<=3;rono++)
                                              {
                                                String CellValue1  = (String) modelSub1.getValueAt(rono,1);
                                                String CellValue2 = (String) modelSub2.getValueAt(rono,1);
                                                if (CellValue1.contains("Staff_Unavailable") && CellValue2.equals("FREE") ){modelSub1.setValueAt("Biology",rono,1); modelSub2.setValueAt(""+SelectedclassSubs,rono,1); BiologyPeriod = BiologyPeriod + 1;}                                      
                                                Bio.setText("");
                                                Bio.setText( " " + BiologyPeriod + "  Period(s)"); 
                                                }
                                     String querydrop = "DROP TABLE IF EXISTS "+ Date.getText().replaceAll("/","") + "$$$Biology" +" ;";
                                          stmtSubs.executeUpdate(querydrop);
                                     for (int rono1=0;rono1<9;rono1++){BiologyToday[rono1]= (String) modelSub2.getValueAt(rono1,1);}
                                      String queryBiologySubT = "CREATE TABLE " + Date.getText().replaceAll("/","") + "$$$Biology" + "( P1 varchar(50) UNIQUE,P2 varchar(50),P3 varchar(50),P4 varchar(50),P5 varchar(50),P6 varchar(50),P7 varchar(50),P8 varchar(50),P9 varchar(50));" ;
                                        String queryBiologySubTInsert = "INSERT INTO "+ Date.getText().replaceAll("/","") + "$$$Biology VALUES ( '" + BiologyToday[0] + "' ,'" + BiologyToday[1] + "' ,'" + BiologyToday[2] + "' ,'" + BiologyToday[3] + "' , '"+ BiologyToday[4] + "' , '"+ BiologyToday[5] + "' , '"+ BiologyToday[6] + "' ,'"+ BiologyToday[7] + "' , '"+ BiologyToday[8] + "' );" ;
                                          stmtSubs.executeUpdate(queryBiologySubT); 
                                          stmtSubs.executeUpdate(queryBiologySubTInsert); 
                                      
                                          modelSub2.setRowCount(0);
                                        }
                
/* For Games Subs*/
                if(GAMES.isSelected()){
                                    String queryGames = "Select Period , " + DAY + " from Games " + "  ; ";
                                     ResultSet rsSubsGames =stmtSubs.executeQuery(queryGames);
                                      while(rsSubsGames.next())
                                         {
                                             String p = rsSubsGames.getString("Period");
                                             String day = rsSubsGames.getString(""+DAY);
                                                 modelSub2.addRow(new Object[] {p,day});
                                         } 
                                     rsSubsGames.close();
                                     String[] GamesToday = new String[10];       
                                     for (int rono=0;rono<9&&GamesPeriod<=1;rono++)
                                              {
                                                String CellValue1  = (String) modelSub1.getValueAt(rono,1);
                                                String CellValue2 = (String) modelSub2.getValueAt(rono,1);
                                                if (CellValue1.contains("Staff_Unavailable") && CellValue2.equals("FREE") ){modelSub1.setValueAt("Games",rono,1); modelSub2.setValueAt(""+SelectedclassSubs,rono,1); GamesPeriod = GamesPeriod + 1;}                                      
                                                Gam.setText("");
                                                Gam.setText( " " + GamesPeriod + "  Period(s)"); 
                                              for (int rono1=0;rono1<9;rono1++){GamesToday[rono1]= (String) modelSub2.getValueAt(rono1,1);} 
                                               }
                                     String querydrop = "DROP TABLE IF EXISTS "+ Date.getText().replaceAll("/","") + "$$$Games" +" ;";
                                     String queryGamesSubT = "CREATE TABLE " + Date.getText().replaceAll("/","") + "$$$Games" + "( P1 varchar(50) UNIQUE,P2 varchar(50),P3 varchar(50),P4 varchar(50),P5 varchar(50),P6 varchar(50),P7 varchar(50),P8 varchar(50),P9 varchar(50));" ;
                                     String queryGamesSubTInsert = "INSERT INTO "+ Date.getText().replaceAll("/","") + "$$$Games VALUES ( '" + GamesToday[0] + "' ,'" + GamesToday[1] + "' ,'" + GamesToday[2] + "' ,'" + GamesToday[3] + "' , '"+ GamesToday[4] + "' , '"+ GamesToday[5] + "' , '"+ GamesToday[6] + "' ,'"+ GamesToday[7] + "' , '"+ GamesToday[8] + "' );" ;
                                        stmtSubs.executeUpdate(querydrop);  
                                        stmtSubs.executeUpdate(queryGamesSubT); 
                                        stmtSubs.executeUpdate(queryGamesSubTInsert);
                                          modelSub2.setRowCount(0);
                                        }
            rsSubs.close();
            rsSubs1.close();           
            stmtSubs.close();
            conSubs.close();      
        }
        catch(Exception e){JOptionPane.showMessageDialog(this,e.getMessage());}
                

        {
         T0P.setText("Subjects with No Period: \n");T1P.setText("Subjects with One Period: \n");T2P.setText("Subjects with Two Periods: \n");
        {if(EnglishPeriod==0)   {T0P.append("\n English");}              if(EnglishPeriod==1)       {T1P.append("\n English");}                 if(EnglishPeriod==2)    {T2P.append("\n English");}}
        {if(PhysicsPeriod==0)   {T0P.append("\n Physics");}              if(PhysicsPeriod==1)       {T1P.append("\n Physics");}                 if(PhysicsPeriod==2)    {T2P.append("\n Physics");}}
        {if(ChemistryPeriod==0) {T0P.append("\n Chemistry");}            if( ChemistryPeriod==1)    {T1P.append("\n Chemistry");}               if( ChemistryPeriod==2) {T2P.append("\n Chemistry");}}
        {if(BiologyPeriod==0)   {T0P.append("\n Biology");}              if( BiologyPeriod==1)      {T1P.append("\n Biology");}                 if(BiologyPeriod==2)    {T2P.append("\n Biology");}}
        {if(MathPeriod==0)      {T0P.append("\n Mathematics");}          if(  MathPeriod==1)        {T1P.append("\n Mathematics");}             if( MathPeriod==2)      {T2P.append("\n Mathematics");}}
        {if(IPPeriod==0)        {T0P.append("\n Informatics Practices");}if( IPPeriod==1)           {T1P.append("\n Informatics Practices");}   if(IPPeriod==2)         {T2P.append("\n Informatics Practices");}}
        {if(GamesPeriod==0)     {T0P.append("\n Games");}                if(GamesPeriod==1)         {T1P.append("\n Games");}                   if( GamesPeriod==2)     {T2P.append("\n Games");}}
        }
    }//GEN-LAST:event_GetSubTimeTableActionPerformed

    private void CBCLASSSubsPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_CBCLASSSubsPopupMenuWillBecomeInvisible
/*Event listener to calculate the number of periods in each subject using a Period Counter Button*/
        PeriodCounter.doClick();
    }//GEN-LAST:event_CBCLASSSubsPopupMenuWillBecomeInvisible

    private void DateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_DateFocusLost
/*Snippet to get Day from the entered Date*/
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("d/M/yyyy");
        LocalDate date = LocalDate.parse(Date.getText(), formatter);
        DayOfWeek dow = date.getDayOfWeek();
        String output = dow.getDisplayName(TextStyle.FULL, Locale.US);
        Day.setText(output);
    }//GEN-LAST:event_DateFocusLost

    private void GetSubstitutionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GetSubstitutionActionPerformed
/*Menu Item Handling Code to open the Subsitution Frame*/
        SubsSubstitution.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_GetSubstitutionActionPerformed

    private void GotoMainScreenSubsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GotoMainScreenSubsActionPerformed
/*Button to return to the Main Screen from the Substituition Frame*/
        SubsSubstitution.setVisible(false);
        this.setVisible(true);
    }//GEN-LAST:event_GotoMainScreenSubsActionPerformed

    private void PeriodCounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PeriodCounterActionPerformed
 /*Code Segment to calculate the Number of Periods in a Day in each Subject*/
        String DAY = Day.getText();
        ip.setVisible(true);        LIP.setVisible(true);   Inf.setVisible(true);   IP.setVisible(true);
        MATH.setVisible(true);      LMath.setVisible(true); Mat.setVisible(true);   Math.setVisible(true);
        BIOLOGY.setVisible(true);   LBio.setVisible(true);  Bio.setVisible(true);   Biology.setVisible(true);
        
        SelectedClass.setText(""+CBCLASSSubs.getSelectedItem());
        int selclass1 = CBCLASSSubs.getSelectedIndex();
        
        switch (selclass1){
            case 0 : SELCLASS = "xiant";break;
            case 1 : SELCLASS = "xiatl";break;
            case 2 : SELCLASS = "xipac";break;
            case 3 : SELCLASS = "xiiant";break;
            case 4 : SELCLASS = "xiiatl";break;
            case 5 : SELCLASS = "xiipac";break;
            default :JOptionPane.showMessageDialog(this,"Dear User,Please select a class!!!");break;
                          }
/*Connecting to My-SQL*/
        try{
            Class.forName("com.mysql.jdbc.Driver");
            Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/"+DBName,"root",MySQLPass);
            Statement stmt1=con.createStatement();
            String query1 = "Select count("+ DAY + ") from "+ SELCLASS +" where "+ DAY + " Like 'English';";

            Statement stmt2=con.createStatement();
            String query2 = "Select count("+ DAY + ") from "+ SELCLASS +" where "+ DAY + " Like 'Physics';";

            Statement stmt3=con.createStatement();
            String query3 = "Select count("+ DAY + ") from "+ SELCLASS +" where "+ DAY + " Like 'Chemistry';";

            Statement stmt4=con.createStatement();
            String query4 = "Select count("+ DAY + ") from "+ SELCLASS +" where "+ DAY + " Like 'Biology';";

            Statement stmt5=con.createStatement();
            String query5 = "Select count("+ DAY + ") from "+ SELCLASS +" where "+ DAY + " Like 'Math';";

            Statement stmt6=con.createStatement();
            String query6 = "Select count("+ DAY + ") from "+ SELCLASS +" where "+ DAY + " Like 'IP';";
            
            Statement stmt7=con.createStatement();
            String query7 = "Select count("+ DAY + ") from "+ SELCLASS +" where "+ DAY + " Like 'Games';";

            ResultSet rs1=stmt1.executeQuery(query1);
            ResultSet rs2=stmt2.executeQuery(query2);
            ResultSet rs3=stmt3.executeQuery(query3);
            ResultSet rs4=stmt4.executeQuery(query4);
            ResultSet rs5=stmt5.executeQuery(query5);
            ResultSet rs6=stmt6.executeQuery(query6);
            ResultSet rs7=stmt7.executeQuery(query7);
            
            rs1.absolute(1);
            rs2.absolute(1);
            rs3.absolute(1);
            rs4.absolute(1);
            rs5.absolute(1);
            rs6.absolute(1);
            rs7.absolute(1);

            EnglishPeriod = rs1.getInt("COUNT(" + DAY + ")");
            PhysicsPeriod = rs2.getInt("COUNT(" + DAY + ")");
            ChemistryPeriod = rs3.getInt("COUNT(" + DAY + ")");
            BiologyPeriod = rs4.getInt("COUNT(" + DAY + ")");
            MathPeriod = rs5.getInt("COUNT(" + DAY + ")");
            IPPeriod = rs6.getInt("COUNT(" + DAY + ")");
            GamesPeriod = rs7.getInt("COUNT(" + DAY + ")");

            Eng.setText( " " + EnglishPeriod + "  Period(s)");
            Phy.setText( " " + PhysicsPeriod +"  Period(s)");
            Che.setText( " " + ChemistryPeriod +"  Period(s)");
            Bio.setText( " " + BiologyPeriod + "  Period(s)");
            Mat.setText( " " + MathPeriod + "  Period(s)");
            Inf.setText( " " + IPPeriod + "  Period(s)");
            Gam.setText( " " + GamesPeriod + "  Period(s)");

            rs1.close();
            rs2.close();
            rs3.close();
            rs4.close();
            rs5.close();
            rs6.close();
            rs7.close();
            stmt1.close();
            con.close();
        }
        
        catch(Exception e){
            String ErrorSQL = e.getMessage();
            if(ErrorSQL.equalsIgnoreCase("Unknown column 'Saturday' in 'field list'"))
            {JOptionPane.showMessageDialog(null,"Dear User,This software doesn't work with Time Tables for Saturdays!!! \n Program will return to the Main Screen Now !!!"); GotoMainScreenSubs.doClick();}
            if(ErrorSQL.equalsIgnoreCase("Unknown column 'Sunday' in 'field list'"))
            {JOptionPane.showMessageDialog(null,"Dear User,This software doesn't work with Time Tables for Sundays!!! \n Program will return to the Main Screen Now !!!"); GotoMainScreenSubs.doClick();}
            else{JOptionPane.showMessageDialog(this,e.getMessage());}}

        if(SELCLASS.equals("xiant") || SELCLASS.equals("xiiant")){ip.setVisible(false);LIP.setVisible(false);Inf.setVisible(false);IP.setVisible(false);}
        if(SELCLASS.equals("xipac") || SELCLASS.equals("xiipac")){MATH.setVisible(false);LMath.setVisible(false);Mat.setVisible(false);Math.setVisible(false);}
        if(SELCLASS.equals("xiatl") || SELCLASS.equals("xiiatl")){BIOLOGY.setVisible(false);LBio.setVisible(false);Bio.setVisible(false);Biology.setVisible(false);}
    }//GEN-LAST:event_PeriodCounterActionPerformed

    private void SubstitutionHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubstitutionHistoryActionPerformed
/*Menu Item to open the Frame to view the previously saved Time Table*/
ViewSavedTT.setVisible(true);
this.setVisible(false);
    }//GEN-LAST:event_SubstitutionHistoryActionPerformed

    private void EnglishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnglishActionPerformed
if (English.isSelected()){ENGLISH.setVisible(false);}
    }//GEN-LAST:event_EnglishActionPerformed

    private void PhysicsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PhysicsActionPerformed
if (Physics.isSelected()){PHYSICS.setVisible(false);}
    }//GEN-LAST:event_PhysicsActionPerformed

    private void BiologyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BiologyActionPerformed
if (Biology.isSelected()){BIOLOGY.setVisible(false);}
    }//GEN-LAST:event_BiologyActionPerformed

    private void MathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MathActionPerformed
if (Math.isSelected()){MATH.setVisible(false);}
    }//GEN-LAST:event_MathActionPerformed

    private void IPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IPActionPerformed
 if (IP.isSelected()){ip.setVisible(false);}
    }//GEN-LAST:event_IPActionPerformed

    private void GamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GamesActionPerformed
 if (Games.isSelected()){GAMES.setVisible(false);}
    }//GEN-LAST:event_GamesActionPerformed

    private void ChemistryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChemistryActionPerformed
 if (Chemistry.isSelected()){CHEMISTRY.setVisible(false);}
    }//GEN-LAST:event_ChemistryActionPerformed

    private void GetTTSavedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GetTTSavedActionPerformed
String SelectedSubject =  (String) ViewSavedTTCB.getSelectedItem();
String DateTT = GetTTDate.getText().replaceAll("/","");
DefaultTableModel modelSavedTT =(DefaultTableModel)GetTTTable.getModel(); modelSavedTT.setRowCount(0);
/*Connection to My-SQL*/
    try{
            Class.forName("com.mysql.jdbc.Driver");
            Connection conSavedTT=DriverManager.getConnection("jdbc:mysql://localhost:3306/"+DBName,"root",MySQLPass);
            Statement stmtSavedTT=conSavedTT.createStatement();
            String querySavedTT = "select * from " + DateTT + "$$$" +SelectedSubject+ "  ; ";
            ResultSet rsSavedTT=stmtSavedTT.executeQuery(querySavedTT);
            rsSavedTT.next();
            {   String p1 = rsSavedTT.getString("P1");
                String p2 = rsSavedTT.getString("P1");
                String p3 = rsSavedTT.getString("P1");
                String p4 = rsSavedTT.getString("P1");
                String p5 = rsSavedTT.getString("P1");
                String p6 = rsSavedTT.getString("P1");
                String p7 = rsSavedTT.getString("P1");
                String p8 = rsSavedTT.getString("P1"); 
                String p9 = rsSavedTT.getString("P1");
                modelSavedTT.addRow(new Object[] {p1,p2,p3,p4,p5,p6,p7,p8,p9});
            }
            rsSavedTT.close();
            stmtSavedTT.close();
            conSavedTT.close();
            }
    catch(Exception E){JOptionPane.showMessageDialog(this,"Dear User,The Timetable for the Entered Date and Subject is not Available!!! \n\n Incurred Error:  "+E.getMessage());}
    }//GEN-LAST:event_GetTTSavedActionPerformed

    private void GotoMainScreenSubs1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GotoMainScreenSubs1ActionPerformed
this.setVisible(true);
ViewSavedTT.setVisible(false);
    }//GEN-LAST:event_GotoMainScreenSubs1ActionPerformed

    private void ExitViewSavedTTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitViewSavedTTActionPerformed
System.exit(0);
    }//GEN-LAST:event_ExitViewSavedTTActionPerformed

    private void DeleteSavedTTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteSavedTTActionPerformed
DefaultTableModel modelTableDelete =(DefaultTableModel)TableDelete.getModel(); modelTableDelete.setRowCount(0);
/*Connection to My-SQL*/
    try{
            Class.forName("com.mysql.jdbc.Driver");
            Connection conTableDelete=DriverManager.getConnection("jdbc:mysql://localhost:3306/"+DBName,"root",MySQLPass);
            Statement stmtTableDelete=conTableDelete.createStatement();
            String queryTableDelete = "SELECT Table_Name FROM information_schema.tables WHERE table_schema = '"+ DBName +"' AND Table_Name Like '%$$$%';";
            ResultSet rsTableDelete=stmtTableDelete.executeQuery(queryTableDelete);
            while(rsTableDelete.next())
            {   String Table = rsTableDelete.getString(1);
                modelTableDelete.addRow(new Object[] {Table});
            }
            rsTableDelete.close();
            stmtTableDelete.close();
            conTableDelete.close();
            }
    catch(Exception E){JOptionPane.showMessageDialog(this,"Incurred Error:  "+E.getMessage());}
    }//GEN-LAST:event_DeleteSavedTTActionPerformed

    @SuppressWarnings("empty-statement")
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
DefaultTableModel modelTableChecking =(DefaultTableModel)InvShowtable.getModel();modelTableChecking.setRowCount(0);
/*Connection to My-SQL*/
    try{
            Class.forName("com.mysql.jdbc.Driver");
            Connection conTableChecking=DriverManager.getConnection("jdbc:mysql://localhost:3306/"+DBName,"root",MySQLPass);
            Statement stmtTableChecking=conTableChecking.createStatement();
            String queryTableChecking = "SELECT Table_Name FROM information_schema.tables WHERE table_schema = '"+ DBName +"';";
            ResultSet rsTableChecking=stmtTableChecking.executeQuery(queryTableChecking);
            
            while(rsTableChecking.next())
            {   String Table = rsTableChecking.getString(1);
                TextAreaTableCheckup.append("\n"+Table);
            }
            String TableInDatabase = TextAreaTableCheckup.getText();
            
                if(TableInDatabase.contains("biology") && TableInDatabase.contains ("chemistry") && TableInDatabase.contains ("ip") && TableInDatabase.contains ("userhistory")&&TableInDatabase.contains ("login")&&TableInDatabase.contains ("xiipac")) 
                         {
                          DatabaseLogIn.setVisible(false);
                          DatabaseLabel.setVisible(false);
                          TextAreaTableCheckup.setText("");
                         } 
                else
                {
                 JOptionPane.showMessageDialog(this,"Table(s) are missing... \n\n Please import them again.... ");
                }        
            
            
            
            rsTableChecking.close();
            stmtTableChecking.close();
            conTableChecking.close(); 
    }
    catch(Exception E) {JOptionPane.showMessageDialog(this,"Incurred Error:" + E.getMessage());}
    }//GEN-LAST:event_formWindowOpened

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        /*Button to exit the application*/
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void AboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutActionPerformed
        /*Button to make About Me Dialog Visible*/
        AboutMe.setVisible(true);
    }//GEN-LAST:event_AboutActionPerformed

    public static void main(String args[]) {
           java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MAIN().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar APPMenuBar;
    private javax.swing.JMenuItem About;
    private javax.swing.JDialog AboutMe;
    private javax.swing.JButton AbtMeCloseBtn;
    private javax.swing.JCheckBox BIOLOGY;
    private javax.swing.JLabel Background;
    private javax.swing.JLabel Background1;
    private javax.swing.JLabel BackgroundReg;
    private javax.swing.JTextField Bio;
    private javax.swing.JCheckBox Biology;
    private javax.swing.JComboBox<String> CBCLASSDWSB;
    private javax.swing.JComboBox<String> CBCLASSPERTT;
    private javax.swing.JComboBox<String> CBCLASSSubs;
    private javax.swing.JComboBox<String> CBDYDWSB;
    private javax.swing.JComboBox<String> CBDayFREE;
    private javax.swing.JComboBox<String> CBGradeFREE;
    private javax.swing.JComboBox<String> CBSUBDWSB;
    private javax.swing.JCheckBox CHEMISTRY;
    private javax.swing.JTextField Che;
    private javax.swing.JCheckBox Chemistry;
    private javax.swing.JButton ClickHereToLogIn;
    private javax.swing.JTextField CurrentDB;
    private javax.swing.JButton DWSBBUTTON;
    private javax.swing.JTable DWSBT;
    private javax.swing.JLabel DatabaseLabel;
    private javax.swing.JTextField DatabaseLogIn;
    private javax.swing.JTextField Date;
    private javax.swing.JLabel Day;
    private javax.swing.JFrame DaySubWiseTT;
    private javax.swing.JMenuItem Day_SubWiseTT;
    private javax.swing.JButton DeleteSavedTT;
    private javax.swing.JFrame DeleteTT;
    private javax.swing.JLabel Description;
    private javax.swing.JCheckBox ENGLISH;
    private javax.swing.JTextField Eng;
    private javax.swing.JCheckBox English;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JButton Exit1;
    private javax.swing.JButton ExitViewSavedTT;
    private javax.swing.JButton FREEPERIOD;
    private javax.swing.JTable FREETable;
    private javax.swing.JMenu File;
    private javax.swing.JMenuItem FreePTT;
    private javax.swing.JFrame FreePeriods;
    private javax.swing.JCheckBox GAMES;
    private javax.swing.JTextField Gam;
    private javax.swing.JCheckBox Games;
    private javax.swing.JButton GetSubTimeTable;
    private javax.swing.JMenuItem GetSubstitution;
    private javax.swing.JTextField GetTTDate;
    private javax.swing.JButton GetTTSaved;
    private javax.swing.JTable GetTTTable;
    private javax.swing.JButton GotoMainScreenSubs;
    private javax.swing.JButton GotoMainScreenSubs1;
    private javax.swing.JCheckBox IP;
    private javax.swing.JTextField Inf;
    private javax.swing.JTable InvShowtable;
    private javax.swing.JLabel InvalidLBL;
    private javax.swing.JFrame InvisibleFrame;
    private javax.swing.JLabel L1;
    private javax.swing.JLabel L2;
    private javax.swing.JLabel LBio;
    private javax.swing.JLabel LIP;
    private javax.swing.JLabel LIP1;
    private javax.swing.JLabel LMath;
    private javax.swing.JFrame Login;
    private javax.swing.JButton LoginBtn;
    private javax.swing.JCheckBox MATH;
    private javax.swing.JTextField Mat;
    private javax.swing.JCheckBox Math;
    private javax.swing.JTextField Name;
    private javax.swing.JTextField NameLogIn;
    private javax.swing.JButton NewUserRegBtn;
    private javax.swing.JMenuItem NewUserRegistration;
    private javax.swing.JCheckBox PHYSICS;
    private javax.swing.JTable PerT;
    private javax.swing.JFrame PerTT;
    private javax.swing.JButton PeriodCounter;
    private javax.swing.JTextArea PeriodToBeSubs;
    private javax.swing.JTextField Phy;
    private javax.swing.JCheckBox Physics;
    private javax.swing.JPasswordField PwdLogIn;
    private javax.swing.JMenu Quit;
    private javax.swing.JButton READMEbtn;
    private javax.swing.JDialog ReadMe;
    private javax.swing.JButton Register;
    private javax.swing.JFrame Registration;
    private javax.swing.JTable SUB;
    private javax.swing.JTable SUB1;
    private javax.swing.JTable SUB2;
    private javax.swing.JLabel SelectedClass;
    private javax.swing.JButton SubsReset;
    private javax.swing.JFrame SubsSubstitution;
    private javax.swing.JMenu Substitution;
    private javax.swing.JMenuItem SubstitutionHistory;
    private javax.swing.JTextArea T0P;
    private javax.swing.JTextArea T1P;
    private javax.swing.JTextArea T2P;
    private javax.swing.JLabel TTM;
    private javax.swing.JTable TableDelete;
    private javax.swing.JTextArea TextAreaTableCheckup;
    private javax.swing.JMenu Utilities;
    private javax.swing.JMenuItem ViewPerTT;
    private javax.swing.JButton ViewPermTT;
    private javax.swing.JFrame ViewSavedTT;
    private javax.swing.JLabel ViewSavedTTBackground;
    private javax.swing.JComboBox<String> ViewSavedTTCB;
    private javax.swing.JLabel Welcome;
    private javax.swing.JCheckBox ip;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JButton loginBTN;
    private javax.swing.JTextField pwd;
    // End of variables declaration//GEN-END:variables
}/*End of Source Code of the Project Time Table Manager*/
